
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COMMA DIV DO ELSE END EQ FOR FUNCTION GE GT IDENT IF INTERVAL LBRACKET LE LPAREN LT MINUS MULT NEQ NUMBER PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ RPAREN SEMICOLON THEN TO VAR WHILE WRITE\n    program : PROGRAM IDENT SEMICOLON outblock PERIOD\n    \n    outblock :  var_decl_part subprog_decl_part outblock_act statement\n    \n    outblock_act :\n    \n    var_decl_part : var_decl_list SEMICOLON\n                  |\n    \n    var_decl_list : var_decl_list SEMICOLON var_decl \n                  | var_decl\n    \n    var_decl : VAR id_list\n    \n    subprog_decl_part : subprog_decl_list SEMICOLON\n                      |\n    \n    subprog_decl_list : subprog_decl_list SEMICOLON subprog_decl\n                  | subprog_decl\n    \n    subprog_decl : proc_decl\n                 | func_decl\n    \n    proc_decl : PROCEDURE proc_name LPAREN RPAREN SEMICOLON inblock\n              | PROCEDURE proc_name LPAREN proc_decl_act1 id_list RPAREN SEMICOLON inblock\n    \n    proc_decl_act1 : \n    \n    proc_name : IDENT\n    \n    inblock : inblock_act1 var_decl_part inblock_act2 statement\n    \n    inblock_act1 : \n    \n    inblock_act2 : \n    \n    func_decl : FUNCTION func_name LPAREN RPAREN SEMICOLON func_inblock\n              | FUNCTION func_name LPAREN func_decl_act1 id_list RPAREN SEMICOLON func_inblock\n    \n    func_decl_act1 : \n    \n    func_name : IDENT\n    \n    func_inblock : func_inblock_act1 var_decl_part func_inblock_act2 statement\n    \n    func_inblock_act1 : \n    \n    func_inblock_act2 : \n    \n    statement_list : statement_list SEMICOLON statement\n                   | statement\n    \n    statement : assignment_statement\n                  | if_statement\n                  | while_statement\n                  | for_statement\n                  | proc_call_statement\n                  | null_statement\n                  | block_statement\n                  | read_statement\n                  | write_statement\n                  | func_call_statement\n    \n    assignment_statement : IDENT ASSIGN expression\n                         | IDENT LBRACKET expression RBRACKET ASSIGN expression\n    \n    if_statement : IF condition if_act1 THEN statement else_statement\n    \n    if_act1 : \n    \n    else_statement : ELSE else_act1 statement\n                  |\n    \n    else_act1 : \n    \n    while_statement : WHILE while_act1 condition while_act2 DO statement \n    \n    while_act1 : \n    \n    while_act2 : \n    \n    for_statement : FOR IDENT ASSIGN expression TO expression for_act1 DO statement\n    \n    for_act1 : \n    \n    proc_call_statement : proc_call_name LPAREN RPAREN\n                        | proc_call_name LPAREN proc_call_statement_act1 arg_list RPAREN\n    \n    proc_call_statement_act1 : \n    \n    func_call_statement : func_call_name LPAREN RPAREN\n                        | func_call_name LPAREN func_call_statement_act1 arg_list RPAREN\n    \n    func_call_statement_act1 : \n    \n    arg_list : expression\n             | arg_list COMMA expression\n    \n    proc_call_name : IDENT\n    \n    func_call_name : IDENT\n    \n    block_statement : BEGIN statement_list END\n    \n    read_statement : READ LPAREN IDENT RPAREN\n                   | READ LPAREN IDENT LBRACKET expression RBRACKET RPAREN\n    \n    write_statement : WRITE LPAREN expression RPAREN\n    \n    null_statement : \n    \n    condition : expression EQ expression\n              | expression NEQ expression\n              | expression LT expression\n              | expression LE expression\n              | expression GT expression\n              | expression GE expression\n    \n    expression : term\n               | MINUS term\n               | expression PLUS term\n               | expression MINUS term\n               | func_call_statement\n    \n    term : factor\n         | term MULT factor\n         | term DIV factor\n         | func_call_statement\n    \n    factor : var_name\n           | number\n           | LPAREN expression RPAREN\n           | func_call_statement\n    \n    var_name : IDENT\n             | IDENT LBRACKET expression RBRACKET\n    \n    number : NUMBER\n    \n    id_list : IDENT \n            | id_list COMMA IDENT  \n            | id_list COMMA IDENT LBRACKET NUMBER INTERVAL NUMBER RBRACKET\n            | IDENT LBRACKET NUMBER INTERVAL NUMBER RBRACKET COMMA id_list id_list_act1\n    \n    id_list_act1 : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'IDENT':([2,4,6,9,11,16,17,18,21,22,28,42,43,44,46,51,52,55,56,60,63,68,70,73,74,75,77,79,85,86,87,88,89,90,91,92,93,94,99,101,103,105,109,110,112,117,137,141,144,148,151,152,154,157,158,159,160,162,165,170,172,176,183,],[3,-5,-10,20,-3,24,26,-4,41,-9,53,66,-49,69,41,-17,-24,66,66,97,66,66,-55,106,66,-58,20,20,66,66,66,66,66,66,97,97,97,97,66,66,66,41,66,-20,-27,41,66,-5,-5,66,41,66,66,-21,-20,-28,-27,20,-47,41,41,41,41,]),'SEMICOLON':([3,7,8,12,13,14,15,18,19,20,27,31,32,33,34,35,36,37,38,39,40,46,50,53,59,61,62,64,65,66,67,71,72,76,78,82,95,96,97,102,104,105,108,110,112,117,124,125,126,127,128,129,135,136,138,140,141,142,143,144,145,149,150,151,153,156,157,158,159,160,163,164,165,166,170,171,172,173,174,175,176,178,179,180,181,182,183,184,],[4,18,-7,22,-12,-13,-14,-4,-8,-90,-6,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-11,-91,-74,-78,-79,-83,-84,-87,-89,105,-30,110,112,-41,-75,-82,-87,-53,-63,-67,-56,-20,-27,-67,-76,-77,-80,-86,-81,-85,-29,-64,-66,-15,-5,158,-22,-5,160,-46,-88,-67,-54,-57,-21,-20,-28,-27,-42,-43,-47,-48,-67,-16,-67,-23,-92,-94,-67,-65,-19,-26,-93,-45,-67,-51,]),'PROCEDURE':([4,6,18,22,],[-5,16,-4,16,]),'FUNCTION':([4,6,18,22,],[-5,17,-4,17,]),'IF':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,42,-9,42,42,-20,-27,42,-5,-5,42,-21,-20,-28,-27,-47,42,42,42,42,]),'WHILE':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,43,-9,43,43,-20,-27,43,-5,-5,43,-21,-20,-28,-27,-47,43,43,43,43,]),'FOR':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,44,-9,44,44,-20,-27,44,-5,-5,44,-21,-20,-28,-27,-47,44,44,44,44,]),'BEGIN':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,46,-9,46,46,-20,-27,46,-5,-5,46,-21,-20,-28,-27,-47,46,46,46,46,]),'READ':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,47,-9,47,47,-20,-27,47,-5,-5,47,-21,-20,-28,-27,-47,47,47,47,47,]),'WRITE':([4,6,11,18,21,22,46,105,110,112,117,141,144,151,157,158,159,160,165,170,172,176,183,],[-5,-10,-3,-4,48,-9,48,48,-20,-27,48,-5,-5,48,-21,-20,-28,-27,-47,48,48,48,48,]),'PERIOD':([4,5,6,11,18,21,22,30,31,32,33,34,35,36,37,38,39,40,59,61,62,64,65,66,67,82,95,96,97,102,104,108,117,124,125,126,127,128,129,136,138,149,150,151,153,156,163,164,165,166,176,178,182,183,184,],[-5,10,-10,-3,-4,-67,-9,-2,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,-78,-79,-83,-84,-87,-89,-41,-75,-82,-87,-53,-63,-56,-67,-76,-77,-80,-86,-81,-85,-64,-66,-46,-88,-67,-54,-57,-42,-43,-47,-48,-67,-65,-45,-67,-51,]),'VAR':([4,18,110,112,141,144,158,160,],[9,9,-20,-27,9,9,-20,-27,]),'COMMA':([19,20,53,59,61,62,64,65,66,67,95,96,97,108,111,113,124,125,126,127,128,129,133,134,139,147,150,156,168,174,175,181,],[28,-90,-91,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,28,28,-76,-77,-80,-86,-81,-85,154,-59,154,162,-88,-57,-60,-92,28,-93,]),'RPAREN':([20,51,52,53,59,61,62,64,65,66,67,70,75,95,96,97,98,106,107,108,111,113,124,125,126,127,128,129,133,134,139,150,156,168,169,174,175,181,],[-90,76,78,-91,-74,-78,-79,-83,-84,-87,-89,102,108,-75,-82,-87,129,136,138,-56,142,145,-76,-77,-80,-86,-81,-85,153,-59,156,-88,-57,-60,178,-92,-94,-93,]),'LBRACKET':([20,41,53,66,97,106,],[29,56,80,99,99,137,]),'LPAREN':([23,24,25,26,41,42,43,45,47,48,49,55,56,60,63,66,68,70,74,75,85,86,87,88,89,90,91,92,93,94,97,99,101,103,109,137,148,152,154,],[51,-18,52,-25,-61,63,-49,70,73,74,75,63,63,63,63,-62,63,-55,63,-58,63,63,63,63,63,63,63,63,63,63,-62,63,63,63,63,63,63,63,63,]),'NUMBER':([29,42,43,55,56,60,63,68,70,74,75,80,81,85,86,87,88,89,90,91,92,93,94,99,101,103,109,137,146,148,152,154,],[54,67,-49,67,67,67,67,67,-55,67,-58,114,115,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,161,67,67,67,]),'END':([31,32,33,34,35,36,37,38,39,40,46,59,61,62,64,65,66,67,71,72,82,95,96,97,102,104,105,108,117,124,125,126,127,128,129,135,136,138,149,150,151,153,156,163,164,165,166,176,178,182,183,184,],[-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-74,-78,-79,-83,-84,-87,-89,104,-30,-41,-75,-82,-87,-53,-63,-67,-56,-67,-76,-77,-80,-86,-81,-85,-29,-64,-66,-46,-88,-67,-54,-57,-42,-43,-47,-48,-67,-65,-45,-67,-51,]),'ELSE':([31,32,33,34,35,36,37,38,39,40,59,61,62,64,65,66,67,82,95,96,97,102,104,108,117,124,125,126,127,128,129,136,138,149,150,151,153,156,163,164,165,166,176,178,182,183,184,],[-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-74,-78,-79,-83,-84,-87,-89,-41,-75,-82,-87,-53,-63,-56,-67,-76,-77,-80,-86,-81,-85,-64,-66,165,-88,-67,-54,-57,-42,-43,-47,-48,-67,-65,-45,-67,-51,]),'ASSIGN':([41,69,116,],[55,101,148,]),'MINUS':([42,43,55,56,58,59,61,62,63,64,65,66,67,68,70,74,75,82,83,85,86,87,88,89,90,95,96,97,98,99,101,103,107,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,137,148,150,152,154,155,156,163,167,168,],[60,-49,60,60,92,-74,-78,-79,60,-83,-84,-87,-89,60,-55,60,-58,92,92,60,60,60,60,60,60,-75,-82,-87,92,60,60,60,92,-56,60,92,92,92,92,92,92,-76,-77,-80,-86,-81,-85,92,92,92,60,60,-88,60,60,92,-57,92,92,92,]),'INTERVAL':([54,114,],[81,146,]),'THEN':([57,59,61,62,64,65,66,67,84,95,96,97,108,118,119,120,121,122,123,124,125,126,127,128,129,150,156,],[-44,-74,-78,-79,-83,-84,-87,-89,117,-75,-82,-87,-56,-68,-69,-70,-71,-72,-73,-76,-77,-80,-86,-81,-85,-88,-57,]),'EQ':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[85,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'NEQ':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[86,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'LT':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[87,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'LE':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[88,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'GT':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[89,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'GE':([58,59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[90,-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,-88,-57,]),'PLUS':([58,59,61,62,64,65,66,67,82,83,95,96,97,98,107,108,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,150,155,156,163,167,168,],[91,-74,-78,-79,-83,-84,-87,-89,91,91,-75,-82,-87,91,91,-56,91,91,91,91,91,91,-76,-77,-80,-86,-81,-85,91,91,91,-88,91,-57,91,91,91,]),'RBRACKET':([59,61,62,64,65,66,67,83,95,96,97,108,115,124,125,126,127,128,129,130,150,155,156,161,],[-74,-78,-79,-83,-84,-87,-89,116,-75,-82,-87,-56,147,-76,-77,-80,-86,-81,-85,150,-88,169,-57,174,]),'DO':([59,61,62,64,65,66,67,95,96,97,100,108,118,119,120,121,122,123,124,125,126,127,128,129,131,150,156,167,177,],[-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-50,-56,-68,-69,-70,-71,-72,-73,-76,-77,-80,-86,-81,-85,151,-88,-57,-52,183,]),'TO':([59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,132,150,156,],[-74,-78,-79,-83,-84,-87,-89,-75,-82,-87,-56,-76,-77,-80,-86,-81,-85,152,-88,-57,]),'MULT':([59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[93,-82,-79,-83,-84,-87,-89,93,-82,-87,-56,93,93,-80,-86,-81,-85,-88,-57,]),'DIV':([59,61,62,64,65,66,67,95,96,97,108,124,125,126,127,128,129,150,156,],[94,-82,-79,-83,-84,-87,-89,94,-82,-87,-56,94,94,-80,-86,-81,-85,-88,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'outblock':([4,],[5,]),'var_decl_part':([4,141,144,],[6,157,159,]),'var_decl_list':([4,141,144,],[7,7,7,]),'var_decl':([4,18,141,144,],[8,27,8,8,]),'subprog_decl_part':([6,],[11,]),'subprog_decl_list':([6,],[12,]),'subprog_decl':([6,22,],[13,50,]),'proc_decl':([6,22,],[14,14,]),'func_decl':([6,22,],[15,15,]),'id_list':([9,77,79,162,],[19,111,113,175,]),'outblock_act':([11,],[21,]),'proc_name':([16,],[23,]),'func_name':([17,],[25,]),'statement':([21,46,105,117,151,170,172,176,183,],[30,72,135,149,166,179,180,182,184,]),'assignment_statement':([21,46,105,117,151,170,172,176,183,],[31,31,31,31,31,31,31,31,31,]),'if_statement':([21,46,105,117,151,170,172,176,183,],[32,32,32,32,32,32,32,32,32,]),'while_statement':([21,46,105,117,151,170,172,176,183,],[33,33,33,33,33,33,33,33,33,]),'for_statement':([21,46,105,117,151,170,172,176,183,],[34,34,34,34,34,34,34,34,34,]),'proc_call_statement':([21,46,105,117,151,170,172,176,183,],[35,35,35,35,35,35,35,35,35,]),'null_statement':([21,46,105,117,151,170,172,176,183,],[36,36,36,36,36,36,36,36,36,]),'block_statement':([21,46,105,117,151,170,172,176,183,],[37,37,37,37,37,37,37,37,37,]),'read_statement':([21,46,105,117,151,170,172,176,183,],[38,38,38,38,38,38,38,38,38,]),'write_statement':([21,46,105,117,151,170,172,176,183,],[39,39,39,39,39,39,39,39,39,]),'func_call_statement':([21,42,46,55,56,60,63,68,74,85,86,87,88,89,90,91,92,93,94,99,101,103,105,109,117,137,148,151,152,154,170,172,176,183,],[40,61,40,61,61,96,61,61,61,61,61,61,61,61,61,96,96,127,127,61,61,61,40,61,40,61,61,40,61,61,40,40,40,40,]),'proc_call_name':([21,46,105,117,151,170,172,176,183,],[45,45,45,45,45,45,45,45,45,]),'func_call_name':([21,42,46,55,56,60,63,68,74,85,86,87,88,89,90,91,92,93,94,99,101,103,105,109,117,137,148,151,152,154,170,172,176,183,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'condition':([42,68,],[57,100,]),'expression':([42,55,56,63,68,74,85,86,87,88,89,90,99,101,103,109,137,148,152,154,],[58,82,83,98,58,107,118,119,120,121,122,123,130,132,134,134,155,163,167,168,]),'term':([42,55,56,60,63,68,74,85,86,87,88,89,90,91,92,99,101,103,109,137,148,152,154,],[59,59,59,95,59,59,59,59,59,59,59,59,59,124,125,59,59,59,59,59,59,59,59,]),'factor':([42,55,56,60,63,68,74,85,86,87,88,89,90,91,92,93,94,99,101,103,109,137,148,152,154,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,126,128,62,62,62,62,62,62,62,62,]),'var_name':([42,55,56,60,63,68,74,85,86,87,88,89,90,91,92,93,94,99,101,103,109,137,148,152,154,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'number':([42,55,56,60,63,68,74,85,86,87,88,89,90,91,92,93,94,99,101,103,109,137,148,152,154,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'while_act1':([43,],[68,]),'statement_list':([46,],[71,]),'proc_decl_act1':([51,],[77,]),'func_decl_act1':([52,],[79,]),'if_act1':([57,],[84,]),'proc_call_statement_act1':([70,],[103,]),'func_call_statement_act1':([75,],[109,]),'while_act2':([100,],[131,]),'arg_list':([103,109,],[133,139,]),'inblock':([110,158,],[140,171,]),'inblock_act1':([110,158,],[141,141,]),'func_inblock':([112,160,],[143,173,]),'func_inblock_act1':([112,160,],[144,144,]),'else_statement':([149,],[164,]),'inblock_act2':([157,],[170,]),'func_inblock_act2':([159,],[172,]),'else_act1':([165,],[176,]),'for_act1':([167,],[177,]),'id_list_act1':([175,],[181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENT SEMICOLON outblock PERIOD','program',5,'p_program','compiler.py',128),
  ('outblock -> var_decl_part subprog_decl_part outblock_act statement','outblock',4,'p_outblock','compiler.py',155),
  ('outblock_act -> <empty>','outblock_act',0,'p_outblock_act','compiler.py',165),
  ('var_decl_part -> var_decl_list SEMICOLON','var_decl_part',2,'p_var_decl_part','compiler.py',173),
  ('var_decl_part -> <empty>','var_decl_part',0,'p_var_decl_part','compiler.py',174),
  ('var_decl_list -> var_decl_list SEMICOLON var_decl','var_decl_list',3,'p_var_decl_list','compiler.py',180),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','compiler.py',181),
  ('var_decl -> VAR id_list','var_decl',2,'p_var_decl','compiler.py',186),
  ('subprog_decl_part -> subprog_decl_list SEMICOLON','subprog_decl_part',2,'p_subprog_decl_part','compiler.py',192),
  ('subprog_decl_part -> <empty>','subprog_decl_part',0,'p_subprog_decl_part','compiler.py',193),
  ('subprog_decl_list -> subprog_decl_list SEMICOLON subprog_decl','subprog_decl_list',3,'p_subprog_decl_list','compiler.py',198),
  ('subprog_decl_list -> subprog_decl','subprog_decl_list',1,'p_subprog_decl_list','compiler.py',199),
  ('subprog_decl -> proc_decl','subprog_decl',1,'p_subprog_decl','compiler.py',204),
  ('subprog_decl -> func_decl','subprog_decl',1,'p_subprog_decl','compiler.py',205),
  ('proc_decl -> PROCEDURE proc_name LPAREN RPAREN SEMICOLON inblock','proc_decl',6,'p_proc_decl','compiler.py',211),
  ('proc_decl -> PROCEDURE proc_name LPAREN proc_decl_act1 id_list RPAREN SEMICOLON inblock','proc_decl',8,'p_proc_decl','compiler.py',212),
  ('proc_decl_act1 -> <empty>','proc_decl_act1',0,'p_proc_decl_act1','compiler.py',219),
  ('proc_name -> IDENT','proc_name',1,'p_proc_name','compiler.py',226),
  ('inblock -> inblock_act1 var_decl_part inblock_act2 statement','inblock',4,'p_inblock','compiler.py',235),
  ('inblock_act1 -> <empty>','inblock_act1',0,'p_inblock_act1','compiler.py',241),
  ('inblock_act2 -> <empty>','inblock_act2',0,'p_inblock_act2','compiler.py',248),
  ('func_decl -> FUNCTION func_name LPAREN RPAREN SEMICOLON func_inblock','func_decl',6,'p_func_decl','compiler.py',256),
  ('func_decl -> FUNCTION func_name LPAREN func_decl_act1 id_list RPAREN SEMICOLON func_inblock','func_decl',8,'p_func_decl','compiler.py',257),
  ('func_decl_act1 -> <empty>','func_decl_act1',0,'p_func_decl_act1','compiler.py',269),
  ('func_name -> IDENT','func_name',1,'p_func_name','compiler.py',276),
  ('func_inblock -> func_inblock_act1 var_decl_part func_inblock_act2 statement','func_inblock',4,'p_func_inblock','compiler.py',285),
  ('func_inblock_act1 -> <empty>','func_inblock_act1',0,'p_func_inblock_act1','compiler.py',294),
  ('func_inblock_act2 -> <empty>','func_inblock_act2',0,'p_func_inblock_act2','compiler.py',301),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','compiler.py',312),
  ('statement_list -> statement','statement_list',1,'p_statement_list','compiler.py',313),
  ('statement -> assignment_statement','statement',1,'p_statement','compiler.py',319),
  ('statement -> if_statement','statement',1,'p_statement','compiler.py',320),
  ('statement -> while_statement','statement',1,'p_statement','compiler.py',321),
  ('statement -> for_statement','statement',1,'p_statement','compiler.py',322),
  ('statement -> proc_call_statement','statement',1,'p_statement','compiler.py',323),
  ('statement -> null_statement','statement',1,'p_statement','compiler.py',324),
  ('statement -> block_statement','statement',1,'p_statement','compiler.py',325),
  ('statement -> read_statement','statement',1,'p_statement','compiler.py',326),
  ('statement -> write_statement','statement',1,'p_statement','compiler.py',327),
  ('statement -> func_call_statement','statement',1,'p_statement','compiler.py',328),
  ('assignment_statement -> IDENT ASSIGN expression','assignment_statement',3,'p_assignment_statement','compiler.py',334),
  ('assignment_statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression','assignment_statement',6,'p_assignment_statement','compiler.py',335),
  ('if_statement -> IF condition if_act1 THEN statement else_statement','if_statement',6,'p_if_statement','compiler.py',369),
  ('if_act1 -> <empty>','if_act1',0,'p_if_act1','compiler.py',374),
  ('else_statement -> ELSE else_act1 statement','else_statement',3,'p_else_statement','compiler.py',385),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','compiler.py',386),
  ('else_act1 -> <empty>','else_act1',0,'p_else_act1','compiler.py',399),
  ('while_statement -> WHILE while_act1 condition while_act2 DO statement','while_statement',6,'p_while_statement','compiler.py',410),
  ('while_act1 -> <empty>','while_act1',0,'p_while_act1','compiler.py',419),
  ('while_act2 -> <empty>','while_act2',0,'p_while_act2','compiler.py',428),
  ('for_statement -> FOR IDENT ASSIGN expression TO expression for_act1 DO statement','for_statement',9,'p_for_statement','compiler.py',440),
  ('for_act1 -> <empty>','for_act1',0,'p_for_act1','compiler.py',462),
  ('proc_call_statement -> proc_call_name LPAREN RPAREN','proc_call_statement',3,'p_proc_call_statement','compiler.py',495),
  ('proc_call_statement -> proc_call_name LPAREN proc_call_statement_act1 arg_list RPAREN','proc_call_statement',5,'p_proc_call_statement','compiler.py',496),
  ('proc_call_statement_act1 -> <empty>','proc_call_statement_act1',0,'p_proc_call_statement_act1','compiler.py',506),
  ('func_call_statement -> func_call_name LPAREN RPAREN','func_call_statement',3,'p_func_call_statement','compiler.py',513),
  ('func_call_statement -> func_call_name LPAREN func_call_statement_act1 arg_list RPAREN','func_call_statement',5,'p_func_call_statement','compiler.py',514),
  ('func_call_statement_act1 -> <empty>','func_call_statement_act1',0,'p_func_call_statement_act1','compiler.py',527),
  ('arg_list -> expression','arg_list',1,'p_arg_list','compiler.py',534),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','compiler.py',535),
  ('proc_call_name -> IDENT','proc_call_name',1,'p_proc_call_name','compiler.py',547),
  ('func_call_name -> IDENT','func_call_name',1,'p_func_call_name','compiler.py',556),
  ('block_statement -> BEGIN statement_list END','block_statement',3,'p_block_statement','compiler.py',565),
  ('read_statement -> READ LPAREN IDENT RPAREN','read_statement',4,'p_read_statement','compiler.py',571),
  ('read_statement -> READ LPAREN IDENT LBRACKET expression RBRACKET RPAREN','read_statement',7,'p_read_statement','compiler.py',572),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','compiler.py',608),
  ('null_statement -> <empty>','null_statement',0,'p_null_statement','compiler.py',618),
  ('condition -> expression EQ expression','condition',3,'p_condition','compiler.py',623),
  ('condition -> expression NEQ expression','condition',3,'p_condition','compiler.py',624),
  ('condition -> expression LT expression','condition',3,'p_condition','compiler.py',625),
  ('condition -> expression LE expression','condition',3,'p_condition','compiler.py',626),
  ('condition -> expression GT expression','condition',3,'p_condition','compiler.py',627),
  ('condition -> expression GE expression','condition',3,'p_condition','compiler.py',628),
  ('expression -> term','expression',1,'p_expression','compiler.py',640),
  ('expression -> MINUS term','expression',2,'p_expression','compiler.py',641),
  ('expression -> expression PLUS term','expression',3,'p_expression','compiler.py',642),
  ('expression -> expression MINUS term','expression',3,'p_expression','compiler.py',643),
  ('expression -> func_call_statement','expression',1,'p_expression','compiler.py',644),
  ('term -> factor','term',1,'p_term','compiler.py',667),
  ('term -> term MULT factor','term',3,'p_term','compiler.py',668),
  ('term -> term DIV factor','term',3,'p_term','compiler.py',669),
  ('term -> func_call_statement','term',1,'p_term','compiler.py',670),
  ('factor -> var_name','factor',1,'p_factor','compiler.py',689),
  ('factor -> number','factor',1,'p_factor','compiler.py',690),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','compiler.py',691),
  ('factor -> func_call_statement','factor',1,'p_factor','compiler.py',692),
  ('var_name -> IDENT','var_name',1,'p_var_name','compiler.py',701),
  ('var_name -> IDENT LBRACKET expression RBRACKET','var_name',4,'p_var_name','compiler.py',702),
  ('number -> NUMBER','number',1,'p_number','compiler.py',743),
  ('id_list -> IDENT','id_list',1,'p_id_list','compiler.py',750),
  ('id_list -> id_list COMMA IDENT','id_list',3,'p_id_list','compiler.py',751),
  ('id_list -> id_list COMMA IDENT LBRACKET NUMBER INTERVAL NUMBER RBRACKET','id_list',8,'p_id_list','compiler.py',752),
  ('id_list -> IDENT LBRACKET NUMBER INTERVAL NUMBER RBRACKET COMMA id_list id_list_act1','id_list',9,'p_id_list','compiler.py',753),
  ('id_list_act1 -> <empty>','id_list_act1',0,'p_id_list_act1','compiler.py',776),
]
